{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/action.js","src/lib/game.js","src/lib/gameObject/bench.js","src/lib/gameObject/lamp.js","src/lib/gameObject/platform.js","src/lib/gameObject/pole.js","src/lib/gameObject/tree.js","src/lib/scene.js","src/lib/scene/boot.js","src/lib/scene/play.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxvrfile":"action.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","const debug = \"@@debug\";\r\nconst fontFamily = \"Cute Font\";\r\nconst Game = require(\"./lib/game\");\r\n\r\nWebFont.load({\r\n    google: {\r\n        families: [fontFamily]\r\n    },\r\n    active() {\r\n        const gameObject = new Game(fontFamily, debug);\r\n    }\r\n});\r\n","// load scenes\r\nconst BootScene = require(\"./scene/boot\");\r\nconst PlayScene = require(\"./scene/play\");\r\n\r\nclass Game extends Phaser.Game {\r\n    constructor(font, debug = false) {\r\n        if (debug) {\r\n            console.time(\"Game\");\r\n        }\r\n        super({\r\n            renderer: Phaser.AUTO,\r\n            antialias: true,\r\n            backgroundColor: \"#fcf1de\",\r\n            pixelArt: false,\r\n            roundPixels: true,\r\n            autoCenter: true,\r\n            banner: debug,\r\n            disableContextMenu: !debug,\r\n            scale: {\r\n                mode: Phaser.Scale.RESIZE,\r\n                parent: \"game\",\r\n                width: window.innerWidth,\r\n                height: window.innerHeight\r\n            },\r\n            scene: [\r\n                BootScene,\r\n                PlayScene\r\n            ]\r\n        });\r\n        this.font = font;\r\n        this.debug = debug;\r\n    }\r\n    start() {\r\n        super.start();\r\n        document.querySelector(\"#game canvas\").style.opacity = 1;\r\n        if (this.debug) {\r\n            console.timeEnd(\"Game\");\r\n        }\r\n        this.scale.on(\"resize\", () => {\r\n            document.querySelector(\"#game canvas\").style.opacity = 0;\r\n            window.location.reload();\r\n        });\r\n    }\r\n    sceneLog(name, log) {\r\n        if (this.debug) {\r\n            console.groupCollapsed(`%cScene Log [${name}]`, \"color: green;\");\r\n            console.table(log);\r\n            console.groupEnd();\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Game;","class Bench extends Phaser.GameObjects.Sprite {\r\n    constructor(scene) {\r\n        super(scene, 0, scene.game.config.height * 0.8, \"bench\");\r\n        this.scene = scene;\r\n        this.setOrigin(0, 0.92)\r\n            .setScale(0.8)\r\n            .setDepth(4);\r\n        //\r\n        return this;\r\n    }\r\n    show() {\r\n        this.scene.add.existing(this);\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Bench;","class Lamp extends Phaser.GameObjects.Sprite {\r\n    constructor(scene, count = 2, status = false, currect = true) {\r\n        super(scene, 0, scene.game.config.height * 0.8, `lamp-${count}-${(status == true ? \"on\" : \"off\")}`);\r\n        this.scene = scene;\r\n        this.gameCheck = true;\r\n        this.isCurrect = currect;\r\n        this.lightStatus = status;\r\n        this.setOrigin(0, 0.98)\r\n            .setScale(0.8)\r\n            .setDepth(4)\r\n            .setInteractive()\r\n            .on(\"pointerdown\", () => {\r\n                this.lightStatus = !this.lightStatus;\r\n                this.setTexture(`lamp-${count}-${(this.lightStatus ? \"on\" : \"off\")}`);\r\n            }, this);\r\n        //\r\n        return this;\r\n    }\r\n    show() {\r\n        this.scene.add.existing(this);\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Lamp;","const TreeSprite = require(\"./tree\");\r\nconst PoleSprite = require(\"./pole\");\r\nconst BenchSprite = require(\"./bench\");\r\nconst LampSprite = require(\"./lamp\");\r\n\r\nclass Platform extends Phaser.GameObjects.Container {\r\n    constructor(scene) {\r\n        super(scene, 0, 0);\r\n        this.scene = scene;\r\n        this.level = {\r\n            requestCount: Math.round(scene.game.config.width / 180),\r\n            keepResponse: [],\r\n            data: [],\r\n            current: 1,\r\n            score: 0\r\n        };\r\n        this.scope = {\r\n            available: \"three\",\r\n            one: {\r\n                status: \"active\",\r\n                keep: 20,\r\n                el: this.scene.add.container((this.scene.game.config.width + 100), 0)\r\n            },\r\n            two: {\r\n                status: \"active\",\r\n                keep: 20,\r\n                el: this.scene.add.container((this.scene.game.config.width * 2) + 100, 0)\r\n            },\r\n            three: {\r\n                status: \"pause\",\r\n                keep: 20,\r\n                el: this.scene.add.container(this.scene.game.config.width, 0)\r\n            },\r\n        };\r\n        this.area(this.scope.one.el, 0xff0000);\r\n        this.area(this.scope.two.el, 0x00ff00);\r\n        this.area(this.scope.three.el, 0x0000ff);\r\n        this.add([this.scope.one.el, this.scope.two.el, this.scope.three.el]).setDepth(10);\r\n        // set limit\r\n        this.limit = this.scene.game.config.width * -1;\r\n    }\r\n    show() {\r\n        this.scene.add.existing(this);\r\n        // init start content\r\n        this.addContent(this.scope.one);\r\n        this.addContent(this.scope.two);\r\n    }\r\n    initRequest() {\r\n        this.level.data = [];\r\n        for (let i = 1; i <= this.level.requestCount; i++) {\r\n            this.level.data.push(this.createRequest(this.level.current, (i == this.level.requestCount ? true : Phaser.Utils.Array.GetRandom([true, false]))));\r\n        }\r\n        if (this.level.current > (this.scene.game.device.os.desktop ? 2 : 4)) {\r\n            this.scene.runSpace(\"mid\");\r\n        }\r\n        if (this.level.current > (this.scene.game.device.os.desktop ? 5 : 10)) {\r\n            this.scene.runSpace(\"max\");\r\n        }\r\n        this.level.current++;\r\n    }\r\n    createRequest(level, createResponse = true) {\r\n        let worldLevel = Math.ceil(level / 3);\r\n        let request = {\r\n            count: 0,\r\n            light: Phaser.Math.Between(0, worldLevel),\r\n            pole: {\r\n                status: (Phaser.Math.Between(1, 12) >= 8 ? true : false),\r\n                more: 0\r\n            }\r\n        };\r\n        if (request.light > 4) {\r\n            request.light = 4;\r\n        }\r\n        if (request.pole.status && (request.light > 0 && request.light <= 2)) {\r\n            request.pole.more = Phaser.Utils.Array.GetRandom([-1, -2, 1, 2]);\r\n            if (request.light + request.pole.more < 0) {\r\n                request.pole.more = 0;\r\n            }\r\n        }\r\n        request.count = request.light + request.pole.more;\r\n        let currect = [];\r\n        let wrong = [];\r\n        if (this.level.keepResponse.length >= 2) {\r\n            createResponse = true;\r\n        }\r\n        if (createResponse) {\r\n            for (let index in this.level.keepResponse) {\r\n                currect.push(this.level.keepResponse[index]);\r\n            }\r\n            this.level.keepResponse = [];\r\n        }\r\n        let needLamp = request.count;\r\n        while (needLamp > 0) {\r\n            let select = 1;\r\n            if (needLamp > 1) {\r\n                select = (request.light >= 2 ? 2 : Phaser.Utils.Array.GetRandom([1, 2]));\r\n            }\r\n            currect.push(select);\r\n            needLamp -= select;\r\n        }\r\n        if (!createResponse) {\r\n            for (let index in currect) {\r\n                this.level.keepResponse.push(currect[index]);\r\n            }\r\n            currect = [];\r\n        }\r\n        for (let i = 0; i < currect.length / 2; i++) {\r\n            wrong.push(Phaser.Math.Between(1, 2));\r\n        }\r\n        return {\r\n            request,\r\n            currect,\r\n            wrong\r\n        };\r\n    }\r\n    addContent(scope) {\r\n        if (!this.level.data.length) {\r\n            this.initRequest();\r\n        }\r\n        let maxWidth = scope.el.width * (this.scene.game.device.os.desktop ? 0.8 : 0.6);\r\n        let container = this.scene.add.container(0, 0);\r\n        scope.el.add(container);\r\n        while (scope.keep <= maxWidth && this.level.data.length) {\r\n            let data = this.level.data.shift();\r\n            // add tree\r\n            let treeSpace = Phaser.Math.Between(10, 30);\r\n            let tree = new TreeSprite(this.scene, Phaser.Math.Between(1, 6), data.request.light).show().setX(scope.keep + treeSpace);\r\n            scope.keep += tree.width + treeSpace;\r\n            container.add(tree);\r\n            if (!data.request.pole.status) {\r\n                // add bench\r\n                if (Phaser.Math.Between(1, 2) == 2) {\r\n                    let benchSpace = Phaser.Math.Between(10, 20);\r\n                    let bench = new BenchSprite(this.scene).show().setX(scope.keep + benchSpace);\r\n                    scope.keep += bench.displayWidth + benchSpace;\r\n                    container.add(bench);\r\n                }\r\n            }\r\n            else {\r\n                // add pole\r\n                let poleSpace = Phaser.Math.Between(5, 15);\r\n                let pole = new PoleSprite(this.scene, data.request.pole.more).show().setX(scope.keep + poleSpace);\r\n                scope.keep += pole.displayWidth + poleSpace;\r\n                container.add(pole);\r\n            }\r\n            let lamps = [];\r\n            // add currect lamps\r\n            for (let index in data.currect) {\r\n                let lampSpace = Phaser.Math.Between(10, 20);\r\n                let lampItem = new LampSprite(this.scene, data.currect[index], Phaser.Utils.Array.GetRandom([false, true]), true)\r\n                    .show()\r\n                    .setFlipX((data.currect[index] == 1 ? Phaser.Utils.Array.GetRandom([false, true]) : false))\r\n                    .setX(scope.keep + lampSpace);\r\n                scope.keep += lampItem.displayWidth + lampSpace;\r\n                lamps.push(lampItem);\r\n            }\r\n            // add wrong lamps\r\n            for (let index in data.wrong) {\r\n                if (scope.keep <= maxWidth) {\r\n                    let lampSpace = Phaser.Math.Between(10, 20);\r\n                    let lampItem = new LampSprite(this.scene, data.wrong[index], Phaser.Utils.Array.GetRandom([false, true]), false)\r\n                        .show()\r\n                        .setFlipX((data.currect[index] == 1 ? Phaser.Utils.Array.GetRandom([false, true]) : false))\r\n                        .setX(scope.keep + lampSpace);\r\n                    scope.keep += lampItem.displayWidth + lampSpace;\r\n                    lamps.push(lampItem);\r\n                }\r\n            }\r\n            container.add(lamps);\r\n        }\r\n        container.x = ((scope.el.width - scope.keep) / 2);\r\n    }\r\n    removeContent(scope) {\r\n        scope.status = \"pause\";\r\n        let gameOver = false;\r\n        scope.el.last.each((child) => {\r\n            child.setAlpha(0.3);\r\n            if (child.gameCheck) {\r\n                if (child.isCurrect != child.lightStatus) {\r\n                    child.setAlpha(1).setTintFill(0xff0000, 0x000000);\r\n                    gameOver = true;\r\n                }\r\n            }\r\n        });\r\n        if (gameOver) {\r\n            this.scene.pauseSpace();\r\n\r\n            if (this.scope.one.status == \"active\") {\r\n                this.scene.tweens.add({\r\n                    targets: this.scope.one.el,\r\n                    x: this.scene.game.config.width * 1.2,\r\n                    duration: 800,\r\n                    ease: Phaser.Math.Easing.Back.In\r\n                });\r\n            }\r\n            if (this.scope.two.status == \"active\") {\r\n                this.scene.tweens.add({\r\n                    targets: this.scope.two.el,\r\n                    x: this.scene.game.config.width * 1.2,\r\n                    duration: 800,\r\n                    ease: Phaser.Math.Easing.Back.In\r\n                });\r\n            }\r\n            if (this.scope.three.status == \"active\") {\r\n                this.scene.tweens.add({\r\n                    targets: this.scope.three.el,\r\n                    x: this.scene.game.config.width * 1.2,\r\n                    duration: 800,\r\n                    ease: Phaser.Math.Easing.Back.In\r\n                });\r\n            }\r\n            this.scene.tweens.add({\r\n                targets: scope.el,\r\n                x: 0,\r\n                delay: 800,\r\n                duration: 800,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n            this.scene.time.addEvent({\r\n                delay: 1000,\r\n                callback: () => {\r\n                    this.scene.title.setText(\"Game Over\").setDepth(20).setTintFill(0xff0000, 0x000000);\r\n                },\r\n                callbackScope: this.scene\r\n            });\r\n            this.scene.time.addEvent({\r\n                delay: 6000,\r\n                callback: () => {\r\n                    this.scene.scene.start(\"Boot\");\r\n                },\r\n                callbackScope: this.scene\r\n            });\r\n        } else {\r\n            scope.el.x = Math.abs(this.limit);\r\n            scope.el.removeAll(true);\r\n            scope.keep = 20;\r\n        }\r\n    }\r\n    run(speed = 0) {\r\n        if (speed) {\r\n            this.level.score += speed;\r\n            if (this.scope.one.status == \"active\") {\r\n                this.scope.one.el.x -= speed;\r\n                if (this.scope.one.el.x <= this.limit) {\r\n                    this.scope.available = \"one\";\r\n                    this.scope.three.status = \"active\";\r\n                    this.removeContent(this.scope.one);\r\n                    this.addContent(this.scope.three);\r\n                }\r\n            }\r\n            if (this.scope.two.status == \"active\") {\r\n                this.scope.two.el.x -= speed;\r\n                if (this.scope.two.el.x <= this.limit) {\r\n                    this.scope.available = \"two\";\r\n                    this.scope.one.status = \"active\";\r\n                    this.removeContent(this.scope.two);\r\n                    this.addContent(this.scope.one);\r\n                }\r\n            }\r\n            if (this.scope.three.status == \"active\") {\r\n                this.scope.three.el.x -= speed;\r\n                if (this.scope.three.el.x <= this.limit) {\r\n                    this.scope.available = \"three\";\r\n                    this.scope.two.status = \"active\";\r\n                    this.removeContent(this.scope.three);\r\n                    this.addContent(this.scope.two);\r\n                }\r\n            }\r\n            this.scene.title.setText(Math.round(this.level.score / 10).toString().padStart(5, \"0\"));\r\n        }\r\n    }\r\n    area(scope, color) {\r\n        scope.setSize(this.scene.game.config.width - 40, (this.scene.game.config.height * 0.8) - 40)\r\n        if (false) {\r\n            let areaStart = this.scene.add.graphics(0, 0)\r\n                .fillStyle(color, 0.5)\r\n                .fillRect(10, 10, 2, scope.height + 20);\r\n            let areaEnd = this.scene.add.graphics(0, 0)\r\n                .fillStyle(color, 0.5)\r\n                .fillRect(scope.width + 20, 10, 2, scope.height + 20);\r\n            scope.add([areaStart, areaEnd]);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Platform;","class Pole extends Phaser.GameObjects.Sprite {\r\n    constructor(scene, type = \"0\") {\r\n        let poleType = {\r\n            \"-2\": \"-2\",\r\n            \"-1\": \"-1\",\r\n            \"0\": \"\",\r\n            \"1\": \"+1\",\r\n            \"2\": \"+2\"\r\n        };\r\n        super(scene, 0, scene.game.config.height * 0.8, `pole${poleType[type]}`);\r\n        this.scene = scene;\r\n        this.setOrigin(0, 0.98)\r\n            .setScale(0.8)\r\n            .setDepth(4);\r\n        //\r\n        return this;\r\n    }\r\n    show() {\r\n        this.scene.add.existing(this);\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Pole;","class Tree extends Phaser.GameObjects.Container {\r\n    constructor(scene, type = \"1\", lightCount = 0) {\r\n        super(scene, 0, scene.game.config.height * 0.8);\r\n        this.scene = scene;\r\n        let tree = this.scene.add.sprite(0, 0, `tree${type}`)\r\n            .setScale(0.7)\r\n            .setOrigin(0, 0.92);\r\n        this.add(tree);\r\n        if (lightCount < 0 || lightCount > 4) {\r\n            lightCount = 0;\r\n        }\r\n        if (lightCount) {\r\n            let count = {\r\n                w: 200,\r\n                h: 230\r\n            };\r\n            switch (lightCount) {\r\n                case 2: {\r\n                    count.w *= 2;\r\n                    break;\r\n                }\r\n                case 3: {\r\n                    count.w *= 3;\r\n                    break;\r\n                }\r\n                case 4: {\r\n                    count.w *= 2;\r\n                    count.h *= 2;\r\n                    break;\r\n                }\r\n            }\r\n            let light = this.scene.add.tileSprite(tree.displayWidth / 2, (tree.displayHeight * -1), count.w, count.h, \"light\")\r\n                .setScale(0.13)\r\n                .setOrigin(0.5, 1);\r\n            this.add(light);\r\n        }\r\n        this.setDepth(4).setSize(tree.displayWidth, tree.displayHeight);\r\n        //\r\n        return this;\r\n    }\r\n    show() {\r\n        this.scene.add.existing(this);\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Tree;","const Platform = require(\"./gameObject/platform\");\r\n\r\nclass Scene extends Phaser.Scene {\r\n    constructor(name) {\r\n        super(name);\r\n        this.name = name;\r\n        this.keepLog = [];\r\n        this.lock = true;\r\n    }\r\n    log(message = null, system = false) {\r\n        if (this.game.debug && message) {\r\n            this.keepLog.push({\r\n                message,\r\n                bySystem: system\r\n            });\r\n        }\r\n        return this.keepLog;\r\n    }\r\n    init() {\r\n        this.log(\"init\", true);\r\n    }\r\n    preload() {\r\n        this.log(\"preload\", true);\r\n    }\r\n    create() {\r\n        // add ground\r\n        this.ground = this.add.tileSprite(-2, this.game.config.height + 2, this.game.config.width + 4, this.game.config.height * 0.2, \"ground\")\r\n            .setOrigin(0, 1)\r\n            .setTileScale((this.game.device.os.desktop ? 1 : 0.6))\r\n            .setDepth(0);\r\n        this.ground.speed = { current: 0, pause: 0, min: 2, mid: 3, max: 4 };\r\n        // add city\r\n        this.city = this.add.tileSprite(0, this.game.config.height * 0.8, this.game.config.width, 109, \"city\")\r\n            .setOrigin(0, 1)\r\n            .setDepth(1);\r\n        this.city.speed = { current: 0, pause: 0, min: 0.2, mid: 0.4, max: 0.6 };\r\n        this.line = this.add.graphics(0, 0)\r\n            .fillStyle(0xf4d242, 1)\r\n            .fillRect(0, (this.game.config.height * 0.8), this.game.config.width, 3)\r\n            .setDepth(1);\r\n        // add cloud\r\n        this.cloud = this.add.tileSprite(0, this.game.config.height * 0.6, this.game.config.width, 105, \"cloud\")\r\n            .setOrigin(0, 1)\r\n            .setDepth(2);\r\n        this.cloud.speed = { current: 0, pause: 0, min: -0.4, mid: -0.6, max: -0.8 };\r\n        // load platform\r\n        this.title = this.add.text(this.game.config.width * 0.5, this.game.config.height * 0.15, \"\", {\r\n            font: `${(this.game.device.os.desktop ? \"160\" : \"100\")}px '${this.game.font}'`,\r\n            fill: \"#FFF8EE\"\r\n        }).setOrigin(0.5);\r\n        // end of scene\r\n        this.log(\"create\", true);\r\n        this.game.sceneLog(this.name, this.keepLog);\r\n    }\r\n    update() {\r\n        if (this.lock) return;\r\n        if (this.ground.speed.current) {\r\n            this.platform.run(this.ground.speed.current);\r\n            this.ground.tilePositionX += (this.game.device.os.desktop ? this.ground.speed.current : this.ground.speed.current * 1.6);\r\n            if (this.city.speed.current) {\r\n                this.city.tilePositionX += this.city.speed.current;\r\n            }\r\n        }\r\n        if (this.cloud.speed.current) {\r\n            this.cloud.tilePositionX += this.cloud.speed.current;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Scene;","const Scene = require(\"../scene\");\r\n\r\nclass Boot extends Scene {\r\n    constructor() {\r\n        super(\"Boot\");\r\n    }\r\n    init() {\r\n        super.init();\r\n    }\r\n    preload() {\r\n        super.preload();\r\n        this.load.image(\"ground\", \"data/ground.png\");\r\n        this.load.image(\"city\", \"data/city.png\");\r\n        this.load.image(\"cloud\", \"data/cloud.png\");\r\n        this.load.image(\"play\", \"data/play.png\");\r\n        //\r\n        this.load.image(\"tree1\", \"data/tree1.png\");\r\n        this.load.image(\"tree2\", \"data/tree2.png\");\r\n        this.load.image(\"tree3\", \"data/tree3.png\");\r\n        this.load.image(\"tree4\", \"data/tree4.png\");\r\n        this.load.image(\"tree5\", \"data/tree5.png\");\r\n        this.load.image(\"tree6\", \"data/tree6.png\");\r\n        //\r\n        this.load.image(\"light\", \"data/light.png\");\r\n        this.load.image(\"bench\", \"data/bench.png\");\r\n        //\r\n        this.load.image(\"pole\", \"data/pole.png\");\r\n        this.load.image(\"pole-1\", \"data/pole-1.png\");\r\n        this.load.image(\"pole-2\", \"data/pole-2.png\");\r\n        this.load.image(\"pole+1\", \"data/pole+1.png\");\r\n        this.load.image(\"pole+2\", \"data/pole+2.png\");\r\n        //\r\n        this.load.image(\"lamp-1-on\", \"data/lamp-1-on.png\");\r\n        this.load.image(\"lamp-1-off\", \"data/lamp-1-off.png\");\r\n        this.load.image(\"lamp-2-on\", \"data/lamp-2-on.png\");\r\n        this.load.image(\"lamp-2-off\", \"data/lamp-2-off.png\");\r\n    }\r\n    create() {\r\n        super.create();\r\n        this.title.setText(\"Light Tree\");\r\n        this.btn = this.add.sprite(0, 0, \"play\")\r\n            .setOrigin(0.5)\r\n            .setPosition(this.game.config.width / 2, this.game.config.height / 2)\r\n            .setDepth(10)\r\n            .setScale(0.4)\r\n            .setInteractive()\r\n            .on(\"pointerdown\", () => {\r\n                this.scene.start(\"Play\");\r\n            }, this);;\r\n        this.tweens.add({\r\n            targets: this.btn,\r\n            x: {\r\n                from: this.game.config.width * 0.495,\r\n                to: this.game.config.width * 0.505\r\n            },\r\n            duration: 300,\r\n            yoyo: true,\r\n            repeat: -1\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = Boot;","const Scene = require(\"../scene\");\r\nconst Platform = require(\"../gameObject/platform\");\r\n\r\nclass Play extends Scene {\r\n    constructor() {\r\n        super(\"Play\");\r\n        this.lock = false;\r\n    }\r\n    init() {\r\n        super.init();\r\n    }\r\n    preload() {\r\n        super.preload();\r\n    }\r\n    create() {\r\n        super.create();\r\n        this.lock = false;\r\n        this.platform = new Platform(this);\r\n        if (this.game.config.height > this.game.config.width) {\r\n            this.title.setText(\"Rotate!\");\r\n            this.tweens.add({\r\n                targets: this.title,\r\n                angle: { from: -5, to: 5 },\r\n                duration: 150,\r\n                yoyo: true,\r\n                repeat: -1\r\n            });\r\n        } else {\r\n            if (this.game.config.width < 480 || this.game.config.height < 320) {\r\n                this.title.setText(\"Screen!\");\r\n                this.tweens.add({\r\n                    targets: this.title,\r\n                    y: 50,\r\n                    duration: 150,\r\n                    yoyo: true,\r\n                    repeat: -1\r\n                });\r\n            } else {\r\n                this.platform.show();\r\n                this.runSpace();\r\n            }\r\n        }\r\n    }\r\n    runSpace(speed = \"min\", object = []) {\r\n        if (!object.length) {\r\n            object = [\"ground\", \"city\", \"cloud\"];\r\n        }\r\n        for (let index in object) {\r\n            this[object[index]].speed.current = this[object[index]].speed[speed];\r\n        }\r\n    }\r\n    pauseSpace() {\r\n        this.lock = true;\r\n        this.ground.speed.current = this.ground.speed.pause;\r\n        this.city.speed.current = this.city.speed.pause;\r\n        this.cloud.speed.current = this.cloud.speed.pause;\r\n    }\r\n}\r\n\r\nmodule.exports = Play;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}