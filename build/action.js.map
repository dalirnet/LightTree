{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/action.js","src/lib/game.js","src/lib/gameObject/bench.js","src/lib/gameObject/lamp.js","src/lib/gameObject/platform.js","src/lib/gameObject/pole.js","src/lib/gameObject/tree.js","src/lib/scene.js","src/lib/scene/boot.js","src/lib/scene/play.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"action.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","const debug = \"@@debug\";\r\nconst fontFamily = \"Cute Font\";\r\nconst Game = require(\"./lib/game\");\r\n\r\nWebFont.load({\r\n    google: {\r\n        families: [fontFamily]\r\n    },\r\n    active() {\r\n        const gameObject = new Game(fontFamily, debug);\r\n    }\r\n});\r\n","// load scenes\r\nconst BootScene = require(\"./scene/boot\");\r\nconst PlayScene = require(\"./scene/play\");\r\n\r\nclass Game extends Phaser.Game {\r\n    constructor(font, debug = false) {\r\n        if (debug) {\r\n            console.time(\"Game\");\r\n        }\r\n        super({\r\n            renderer: Phaser.AUTO,\r\n            antialias: true,\r\n            backgroundColor: \"#fcf1de\",\r\n            pixelArt: false,\r\n            roundPixels: true,\r\n            autoCenter: true,\r\n            banner: debug,\r\n            disableContextMenu: !debug,\r\n            scale: {\r\n                mode: Phaser.Scale.RESIZE,\r\n                parent: \"game\",\r\n                width: window.innerWidth,\r\n                height: window.innerHeight\r\n            },\r\n            scene: [\r\n                BootScene,\r\n                PlayScene\r\n            ]\r\n        });\r\n        this.font = font;\r\n        this.debug = debug;\r\n    }\r\n    start() {\r\n        super.start();\r\n        document.querySelector(\"#game canvas\").style.opacity = 1;\r\n        if (this.debug) {\r\n            console.timeEnd(\"Game\");\r\n        }\r\n        this.scale.on(\"resize\", () => {\r\n            document.querySelector(\"#game canvas\").style.opacity = 0;\r\n            window.location.reload();\r\n        });\r\n    }\r\n    sceneLog(name, log) {\r\n        if (this.debug) {\r\n            console.groupCollapsed(`%cScene Log [${name}]`, \"color: green;\");\r\n            console.table(log);\r\n            console.groupEnd();\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Game;","class Bench extends Phaser.GameObjects.Sprite {\r\n    constructor(scene) {\r\n        super(scene, 0, scene.game.config.height * 0.8, \"bench\");\r\n        this.scene = scene;\r\n        this.setOrigin(0, 0.92)\r\n            .setScale(0.8)\r\n            .setDepth(4);\r\n        //\r\n        return this;\r\n    }\r\n    show() {\r\n        this.scene.add.existing(this);\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Bench;","class Lamp extends Phaser.GameObjects.Sprite {\r\n    constructor(scene, count = 2, status = false, flip = false) {\r\n        super(scene, 0, scene.game.config.height * 0.8, `lamp-${count}-${(status == true ? \"on\" : \"off\")}`);\r\n        this.scene = scene;\r\n        this.gameCheck = true;\r\n        this.gameStatus = status;\r\n        this.setOrigin(0, 0.98)\r\n            .setScale(0.8)\r\n            .setDepth(4)\r\n            .setFlipX(flip)\r\n            .setInteractive()\r\n            .on(\"pointerdown\", () => {\r\n                this.gameStatus = !this.gameStatus;\r\n                this.setTexture(`lamp-${count}-${(this.gameStatus ? \"on\" : \"off\")}`);\r\n            }, this);\r\n        //\r\n        return this;\r\n    }\r\n    show() {\r\n        this.scene.add.existing(this);\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Lamp;","const TreeSprite = require(\"./tree\");\r\nconst PoleSprite = require(\"./pole\");\r\nconst BenchSprite = require(\"./bench\");\r\nconst LampSprite = require(\"./lamp\");\r\n\r\nclass Platform extends Phaser.GameObjects.Container {\r\n    constructor(scene) {\r\n        super(scene, 0, 0);\r\n        this.scene = scene;\r\n        this.level = {\r\n            score: 0\r\n        };\r\n        this.scope = {\r\n            available: \"three\",\r\n            one: {\r\n                status: \"active\",\r\n                keep: 20,\r\n                el: this.scene.add.container(this.scene.game.config.width * 0.5, 0)\r\n            },\r\n            two: {\r\n                status: \"active\",\r\n                keep: 20,\r\n                el: this.scene.add.container(this.scene.game.config.width * 1.5, 0)\r\n            },\r\n            three: {\r\n                status: \"pause\",\r\n                keep: 20,\r\n                el: this.scene.add.container(this.scene.game.config.width, 0)\r\n            },\r\n        };\r\n        this.area(this.scope.one.el, 0xff0000);\r\n        this.area(this.scope.two.el, 0x00ff00);\r\n        this.area(this.scope.three.el, 0x0000ff);\r\n        // add title\r\n        this.title = this.scene.add.text(this.scene.game.config.width * 0.5, this.scene.game.config.height * 0.15, \"\", {\r\n            font: `${(this.scene.game.device.os.desktop ? \"160\" : \"100\")}px '${this.scene.game.font}'`,\r\n            fill: \"#FFF8EE\"\r\n        }).setText(`LightTree${this.scene.game.debug ? this.scene.name.charAt(0) : \"\"}`).setOrigin(0.5);\r\n        this.add([this.title, this.scope.one.el, this.scope.two.el, this.scope.three.el]).setDepth(10);\r\n        // set limit\r\n        this.limit = this.scene.game.config.width * -1;\r\n        this.scene.add.existing(this);\r\n        this.addContent(this.scope.one);\r\n    }\r\n    addContent(scope) {\r\n        do {\r\n            let space = Phaser.Math.Between(20, this.scene.game.config.width * 0.1);\r\n\r\n            // let lightCount = Phaser.Math.Between(0, 4);\r\n            // let tree = new TreeSprite(this.scene, Phaser.Math.Between(1, 6), lightCount).show().setX(scope.keep + space);\r\n            // scope.el.add(tree);\r\n            // scope.keep += tree.width + space;\r\n\r\n            // let pole = new PoleSprite(this.scene).show().setX(scope.keep + space);\r\n            // scope.el.add(pole);\r\n            // scope.keep += pole.displayWidth + space;\r\n\r\n            // let bench = new BenchSprite(this.scene).show().setX(scope.keep + space);\r\n            // scope.el.add(bench);\r\n            // scope.keep += bench.displayWidth + space;\r\n\r\n            let lamp = new LampSprite(this.scene, 1, false, false).show().setX(scope.keep + space);\r\n            scope.el.add(lamp);\r\n            scope.keep += lamp.displayWidth + space;\r\n\r\n        }\r\n        while (scope.keep <= scope.el.width * 0.8);\r\n    }\r\n    removeContent(scope) {\r\n        scope.status = \"pause\";\r\n        scope.el.x = Math.abs(this.limit);\r\n        scope.el.each((child) => {\r\n            if (child.gameCheck) {\r\n                console.log(child);\r\n            }\r\n            // child.destroy();\r\n        });\r\n        scope.el.removeAll(true);\r\n    }\r\n    run(speed = 0) {\r\n        if (speed) {\r\n            this.level.score += speed;\r\n            if (this.scope.one.status == \"active\") {\r\n                this.scope.one.el.x -= speed;\r\n                if (this.scope.one.el.x <= this.limit) {\r\n                    this.removeContent(this.scope.one);\r\n                    this.scope.available = \"one\";\r\n                    this.scope.three.status = \"active\";\r\n                }\r\n            }\r\n            if (this.scope.two.status == \"active\") {\r\n                this.scope.two.el.x -= speed;\r\n                if (this.scope.two.el.x <= this.limit) {\r\n                    this.removeContent(this.scope.two);\r\n                    this.scope.available = \"two\";\r\n                    this.scope.one.status = \"active\";\r\n                }\r\n            }\r\n            if (this.scope.three.status == \"active\") {\r\n                this.scope.three.el.x -= speed;\r\n                if (this.scope.three.el.x <= this.limit) {\r\n                    this.removeContent(this.scope.three);\r\n                    this.scope.available = \"three\";\r\n                    this.scope.two.status = \"active\";\r\n                    // test\r\n                    this.scene.pauseSpace();\r\n                }\r\n            }\r\n            this.title.setText(Math.round(this.level.score).toString().padStart(6, \"0\"));\r\n        }\r\n    }\r\n    area(scope, color) {\r\n        scope.setSize(this.scene.game.config.width - 40, (this.scene.game.config.height * 0.8) - 40)\r\n        let area = this.scene.add.graphics(0, 0)\r\n            .fillStyle(color, 0.05)\r\n            .fillRect(20, 20, scope.width, scope.height);\r\n        scope.add(area);\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Platform;","class Pole extends Phaser.GameObjects.Sprite {\r\n    constructor(scene, type = \"\") {\r\n        super(scene, 0, scene.game.config.height * 0.8, `pole${type}`);\r\n        this.scene = scene;\r\n        this.setOrigin(0, 0.98)\r\n            .setScale(0.8)\r\n            .setDepth(4);\r\n        //\r\n        return this;\r\n    }\r\n    show() {\r\n        this.scene.add.existing(this);\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Pole;","class Tree extends Phaser.GameObjects.Container {\r\n    constructor(scene, type = \"1\", lightCount = 0) {\r\n        super(scene, 0, scene.game.config.height * 0.8);\r\n        this.scene = scene;\r\n        let tree = this.scene.add.sprite(0, 0, `tree${type}`)\r\n            .setScale(0.7)\r\n            .setOrigin(0, 0.92);\r\n        this.add(tree);\r\n        if (lightCount < 0 || lightCount > 4) {\r\n            lightCount = 0;\r\n        }\r\n        if (lightCount) {\r\n            let count = {\r\n                w: 200,\r\n                h: 230\r\n            };\r\n            switch (lightCount) {\r\n                case 2: {\r\n                    count.w *= 2;\r\n                    break;\r\n                }\r\n                case 3: {\r\n                    count.w *= 3;\r\n                    break;\r\n                }\r\n                case 4: {\r\n                    count.w *= 2;\r\n                    count.h *= 2;\r\n                    break;\r\n                }\r\n            }\r\n            let light = this.scene.add.tileSprite(tree.displayWidth / 2, (tree.displayHeight * -1), count.w, count.h, \"light\")\r\n                .setScale(0.13)\r\n                .setOrigin(0.5, 1);\r\n            this.add(light);\r\n        }\r\n        this.setDepth(4).setSize(tree.displayWidth, tree.displayHeight);\r\n        //\r\n        return this;\r\n    }\r\n    show() {\r\n        this.scene.add.existing(this);\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Tree;","const Platform = require(\"./gameObject/platform\");\r\n\r\nclass Scene extends Phaser.Scene {\r\n    constructor(name) {\r\n        super(name);\r\n        this.name = name;\r\n        this.keepLog = [];\r\n    }\r\n    log(message = null, system = false) {\r\n        if (this.game.debug && message) {\r\n            this.keepLog.push({\r\n                message,\r\n                bySystem: system\r\n            });\r\n        }\r\n        return this.keepLog;\r\n    }\r\n    init() {\r\n        this.log(\"init\", true);\r\n    }\r\n    preload() {\r\n        this.log(\"preload\", true);\r\n    }\r\n    create() {\r\n        this.ground = this.add.tileSprite(-2, this.game.config.height + 2, this.game.config.width + 4, this.game.config.height * 0.2, \"ground\")\r\n            .setOrigin(0, 1)\r\n            .setTileScale((this.game.device.os.desktop ? 1 : 0.6))\r\n            .setDepth(0);\r\n        this.ground.speed = { current: 0, pause: 0, min: 0.4, mid: 0.8, max: 1 };\r\n        this.city = this.add.tileSprite(0, this.game.config.height * 0.8, this.game.config.width, 109, \"city\")\r\n            .setOrigin(0, 1)\r\n            .setDepth(1);\r\n        this.city.speed = { current: 0, pause: 0, min: 0.1, mid: 0.3, max: 0.6 };\r\n        this.cloud = this.add.tileSprite(0, this.game.config.height * 0.7, this.game.config.width, 105, \"cloud\")\r\n            .setOrigin(0, 1)\r\n            .setDepth(2);\r\n        this.cloud.speed = { current: 0, pause: 0, min: -0.2, mid: 0.4, max: 0.8 };\r\n        // load platform\r\n        if (this.name == \"Play\") {\r\n            this.platform = new Platform(this);\r\n        }\r\n        // end of scene\r\n        this.log(\"create\", true);\r\n        this.game.sceneLog(this.name, this.keepLog);\r\n    }\r\n    update() {\r\n        if (this.ground.speed.current) {\r\n            if (this.name == \"Play\") {\r\n                this.platform.run(this.ground.speed.current);\r\n            }\r\n            this.ground.tilePositionX += (this.game.device.os.desktop ? this.ground.speed.current : this.ground.speed.current * 1.6);\r\n            if (this.city.speed.current) {\r\n                this.city.tilePositionX += this.city.speed.current;\r\n            }\r\n        }\r\n        if (this.cloud.speed.current) {\r\n            this.cloud.tilePositionX += this.cloud.speed.current;\r\n        }\r\n    }\r\n    runSpace(speed = \"min\", object = []) {\r\n        if (!object.length) {\r\n            object = [\"ground\", \"city\", \"cloud\"];\r\n        }\r\n        for (let index in object) {\r\n            this[object[index]].speed.current = this[object[index]].speed[speed];\r\n        }\r\n    }\r\n    pauseSpace() {\r\n        this.ground.speed.current = this.ground.speed.pause;\r\n        this.city.speed.current = this.city.speed.pause;\r\n        this.cloud.speed.current = this.cloud.speed.pause;\r\n    }\r\n}\r\n\r\nmodule.exports = Scene;","const Scene = require(\"../scene\");\r\n\r\nclass Boot extends Scene {\r\n    constructor() {\r\n        super(\"Boot\");\r\n    }\r\n    init() {\r\n        super.init();\r\n    }\r\n    preload() {\r\n        super.preload();\r\n        this.load.image(\"ground\", \"data/ground.png\");\r\n        this.load.image(\"city\", \"data/city.png\");\r\n        this.load.image(\"cloud\", \"data/cloud.png\");\r\n        //\r\n        this.load.image(\"tree1\", \"data/tree1.png\");\r\n        this.load.image(\"tree2\", \"data/tree2.png\");\r\n        this.load.image(\"tree3\", \"data/tree3.png\");\r\n        this.load.image(\"tree4\", \"data/tree4.png\");\r\n        this.load.image(\"tree5\", \"data/tree5.png\");\r\n        this.load.image(\"tree6\", \"data/tree6.png\");\r\n        //\r\n        this.load.image(\"light\", \"data/light.png\");\r\n        this.load.image(\"bench\", \"data/bench.png\");\r\n        //\r\n        this.load.image(\"pole\", \"data/pole.png\");\r\n        this.load.image(\"pole-1\", \"data/pole-1.png\");\r\n        this.load.image(\"pole-2\", \"data/pole-2.png\");\r\n        this.load.image(\"pole+1\", \"data/pole+1.png\");\r\n        this.load.image(\"pole+2\", \"data/pole+2.png\");\r\n        //\r\n        this.load.image(\"lamp-1-on\", \"data/lamp-1-on.png\");\r\n        this.load.image(\"lamp-1-off\", \"data/lamp-1-off.png\");\r\n        this.load.image(\"lamp-2-on\", \"data/lamp-2-on.png\");\r\n        this.load.image(\"lamp-2-off\", \"data/lamp-2-off.png\");\r\n    }\r\n    create() {\r\n        super.create();\r\n        this.scene.start(\"Play\");\r\n        //\r\n        // setTimeout(() => {\r\n        // }, 2000);\r\n    }\r\n}\r\n\r\nmodule.exports = Boot;","const Scene = require(\"../scene\");\r\n\r\nclass Play extends Scene {\r\n    constructor() {\r\n        super(\"Play\");\r\n    }\r\n    init() {\r\n        super.init();\r\n    }\r\n    preload() {\r\n        super.preload();\r\n    }\r\n    create() {\r\n        super.create();\r\n        this.runSpace(\"max\");\r\n        // setTimeout(() => {\r\n        //     this.pauseSpace();\r\n        // }, 6000);\r\n    }\r\n}\r\n\r\nmodule.exports = Play;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}