{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/action.js","src/lib/game.js","src/lib/gameObject/bench.js","src/lib/gameObject/lamp.js","src/lib/gameObject/platform.js","src/lib/gameObject/pole.js","src/lib/gameObject/tree.js","src/lib/scene.js","src/lib/scene/boot.js","src/lib/scene/play.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"action.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","const debug = \"@@debug\";\r\nconst fontFamily = \"Cute Font\";\r\nconst Game = require(\"./lib/game\");\r\n\r\nWebFont.load({\r\n    google: {\r\n        families: [fontFamily]\r\n    },\r\n    active() {\r\n        const gameObject = new Game(fontFamily, debug);\r\n    }\r\n});\r\n","// load scenes\r\nconst BootScene = require(\"./scene/boot\");\r\nconst PlayScene = require(\"./scene/play\");\r\n\r\nclass Game extends Phaser.Game {\r\n    constructor(font, debug = false) {\r\n        if (debug) {\r\n            console.time(\"Game\");\r\n        }\r\n        super({\r\n            renderer: Phaser.AUTO,\r\n            antialias: true,\r\n            backgroundColor: \"#fcf1de\",\r\n            pixelArt: false,\r\n            roundPixels: true,\r\n            autoCenter: true,\r\n            banner: debug,\r\n            disableContextMenu: !debug,\r\n            scale: {\r\n                mode: Phaser.Scale.RESIZE,\r\n                parent: \"game\",\r\n                width: window.innerWidth,\r\n                height: window.innerHeight\r\n            },\r\n            scene: [\r\n                BootScene,\r\n                PlayScene\r\n            ]\r\n        });\r\n        this.font = font;\r\n        this.debug = debug;\r\n    }\r\n    start() {\r\n        super.start();\r\n        document.querySelector(\"#game canvas\").style.opacity = 1;\r\n        if (this.debug) {\r\n            console.timeEnd(\"Game\");\r\n        }\r\n        this.scale.on(\"resize\", () => {\r\n            document.querySelector(\"#game canvas\").style.opacity = 0;\r\n            window.location.reload();\r\n        });\r\n    }\r\n    sceneLog(name, log) {\r\n        if (this.debug) {\r\n            console.groupCollapsed(`%cScene Log [${name}]`, \"color: green;\");\r\n            console.table(log);\r\n            console.groupEnd();\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Game;","class Bench extends Phaser.GameObjects.Sprite {\r\n    constructor(scene) {\r\n        super(scene, 0, scene.game.config.height * 0.8, \"bench\");\r\n        this.scene = scene;\r\n        this.setOrigin(0, 0.92)\r\n            .setScale(0.8)\r\n            .setDepth(4);\r\n        //\r\n        return this;\r\n    }\r\n    show() {\r\n        this.scene.add.existing(this);\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Bench;","class Lamp extends Phaser.GameObjects.Sprite {\r\n    constructor(scene, count = 2, status = false, flip = false) {\r\n        super(scene, 0, scene.game.config.height * 0.8, `lamp-${count}-${(status == true ? \"on\" : \"off\")}`);\r\n        this.scene = scene;\r\n        this.gameCheck = true;\r\n        this.gameStatus = status;\r\n        this.setOrigin(0, 0.98)\r\n            .setScale(0.8)\r\n            .setDepth(4)\r\n            .setFlipX(flip)\r\n            .setInteractive()\r\n            .on(\"pointerdown\", () => {\r\n                this.gameStatus = !this.gameStatus;\r\n                this.setTexture(`lamp-${count}-${(this.gameStatus ? \"on\" : \"off\")}`);\r\n            }, this);\r\n        //\r\n        return this;\r\n    }\r\n    show() {\r\n        this.scene.add.existing(this);\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Lamp;","const TreeSprite = require(\"./tree\");\r\nconst PoleSprite = require(\"./pole\");\r\nconst BenchSprite = require(\"./bench\");\r\nconst LampSprite = require(\"./lamp\");\r\n\r\nclass Platform extends Phaser.GameObjects.Container {\r\n    constructor(scene) {\r\n        super(scene, 0, 0);\r\n        this.scene = scene;\r\n        this.level = {\r\n            score: 0\r\n        };\r\n        this.scope = {\r\n            available: \"three\",\r\n            one: {\r\n                status: \"active\",\r\n                keep: 20,\r\n                el: this.scene.add.container(this.scene.game.config.width * 0.5, 0)\r\n            },\r\n            two: {\r\n                status: \"active\",\r\n                keep: 20,\r\n                el: this.scene.add.container(this.scene.game.config.width * 1.5, 0)\r\n            },\r\n            three: {\r\n                status: \"pause\",\r\n                keep: 20,\r\n                el: this.scene.add.container(this.scene.game.config.width, 0)\r\n            },\r\n        };\r\n        this.area(this.scope.one.el, 0xff0000);\r\n        this.area(this.scope.two.el, 0x00ff00);\r\n        this.area(this.scope.three.el, 0x0000ff);\r\n        // add title\r\n        this.title = this.scene.add.text(this.scene.game.config.width * 0.5, this.scene.game.config.height * 0.15, \"\", {\r\n            font: `${(this.scene.game.device.os.desktop ? \"160\" : \"100\")}px '${this.scene.game.font}'`,\r\n            fill: \"#FFF8EE\"\r\n        }).setText(`LightTree${this.scene.game.debug ? this.scene.name.charAt(0) : \"\"}`).setOrigin(0.5);\r\n        this.add([this.title, this.scope.one.el, this.scope.two.el, this.scope.three.el]).setDepth(10);\r\n        // set limit\r\n        this.limit = this.scene.game.config.width * -1;\r\n        this.scene.add.existing(this);\r\n        this.addContent(this.scope.one);\r\n        this.addContent(this.scope.two);\r\n    }\r\n    addContent(scope) {\r\n        // do {\r\n        let space = Phaser.Math.Between(20, this.scene.game.config.width * 0.1);\r\n\r\n        let lightCount = Phaser.Math.Between(0, 4);\r\n        let tree = new TreeSprite(this.scene, Phaser.Math.Between(1, 6), lightCount).show().setX(scope.keep + space);\r\n        scope.el.add(tree);\r\n        scope.keep += tree.width + space;\r\n\r\n        let pole = new PoleSprite(this.scene).show().setX(scope.keep + space);\r\n        scope.el.add(pole);\r\n        scope.keep += pole.displayWidth + space;\r\n\r\n        let bench = new BenchSprite(this.scene).show().setX(scope.keep + space);\r\n        scope.el.add(bench);\r\n        scope.keep += bench.displayWidth + space;\r\n\r\n        let lamp = new LampSprite(this.scene, 1, false, false).show().setX(scope.keep + space);\r\n        scope.el.add(lamp);\r\n        scope.keep += lamp.displayWidth + space;\r\n\r\n        // }\r\n        // while (scope.keep <= scope.el.width * 0.8);\r\n    }\r\n    removeContent(scope) {\r\n        scope.status = \"pause\";\r\n        scope.el.x = Math.abs(this.limit);\r\n        scope.el.each((child) => {\r\n            if (child.gameCheck) {\r\n                console.log(child);\r\n            }\r\n            // child.destroy();\r\n        });\r\n        scope.el.removeAll(true);\r\n        scope.keep = 20;\r\n    }\r\n    run(speed = 0) {\r\n        if (speed) {\r\n            this.level.score += speed;\r\n            if (this.scope.one.status == \"active\") {\r\n                this.scope.one.el.x -= speed;\r\n                if (this.scope.one.el.x <= this.limit) {\r\n                    this.removeContent(this.scope.one);\r\n                    this.scope.available = \"one\";\r\n                    this.scope.three.status = \"active\";\r\n                    this.addContent(this.scope.three);\r\n                }\r\n            }\r\n            if (this.scope.two.status == \"active\") {\r\n                this.scope.two.el.x -= speed;\r\n                if (this.scope.two.el.x <= this.limit) {\r\n                    this.removeContent(this.scope.two);\r\n                    this.scope.available = \"two\";\r\n                    this.scope.one.status = \"active\";\r\n                    this.addContent(this.scope.one);\r\n                }\r\n            }\r\n            if (this.scope.three.status == \"active\") {\r\n                this.scope.three.el.x -= speed;\r\n                if (this.scope.three.el.x <= this.limit) {\r\n                    this.removeContent(this.scope.three);\r\n                    this.scope.available = \"three\";\r\n                    this.scope.two.status = \"active\";\r\n                    this.addContent(this.scope.two);\r\n                    // test\r\n                    // this.scene.pauseSpace();\r\n                }\r\n            }\r\n            this.title.setText(Math.round(this.level.score / 10).toString().padStart(6, \"0\"));\r\n        }\r\n    }\r\n    area(scope, color) {\r\n        scope.setSize(this.scene.game.config.width - 40, (this.scene.game.config.height * 0.8) - 40)\r\n        let areaStart = this.scene.add.graphics(0, 0)\r\n            .fillStyle(color, 0.5)\r\n            .fillRect(10, 10, 2, scope.height + 20);\r\n        let areaEnd = this.scene.add.graphics(0, 0)\r\n            .fillStyle(color, 0.5)\r\n            .fillRect(scope.width - 10, 10, 2, scope.height + 20);\r\n        scope.add([areaStart, areaEnd]);\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Platform;","class Pole extends Phaser.GameObjects.Sprite {\r\n    constructor(scene, type = \"\") {\r\n        super(scene, 0, scene.game.config.height * 0.8, `pole${type}`);\r\n        this.scene = scene;\r\n        this.setOrigin(0, 0.98)\r\n            .setScale(0.8)\r\n            .setDepth(4);\r\n        //\r\n        return this;\r\n    }\r\n    show() {\r\n        this.scene.add.existing(this);\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Pole;","class Tree extends Phaser.GameObjects.Container {\r\n    constructor(scene, type = \"1\", lightCount = 0) {\r\n        super(scene, 0, scene.game.config.height * 0.8);\r\n        this.scene = scene;\r\n        let tree = this.scene.add.sprite(0, 0, `tree${type}`)\r\n            .setScale(0.7)\r\n            .setOrigin(0, 0.92);\r\n        this.add(tree);\r\n        if (lightCount < 0 || lightCount > 4) {\r\n            lightCount = 0;\r\n        }\r\n        if (lightCount) {\r\n            let count = {\r\n                w: 200,\r\n                h: 230\r\n            };\r\n            switch (lightCount) {\r\n                case 2: {\r\n                    count.w *= 2;\r\n                    break;\r\n                }\r\n                case 3: {\r\n                    count.w *= 3;\r\n                    break;\r\n                }\r\n                case 4: {\r\n                    count.w *= 2;\r\n                    count.h *= 2;\r\n                    break;\r\n                }\r\n            }\r\n            let light = this.scene.add.tileSprite(tree.displayWidth / 2, (tree.displayHeight * -1), count.w, count.h, \"light\")\r\n                .setScale(0.13)\r\n                .setOrigin(0.5, 1);\r\n            this.add(light);\r\n        }\r\n        this.setDepth(4).setSize(tree.displayWidth, tree.displayHeight);\r\n        //\r\n        return this;\r\n    }\r\n    show() {\r\n        this.scene.add.existing(this);\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Tree;","const Platform = require(\"./gameObject/platform\");\r\n\r\nclass Scene extends Phaser.Scene {\r\n    constructor(name) {\r\n        super(name);\r\n        this.name = name;\r\n        this.keepLog = [];\r\n    }\r\n    log(message = null, system = false) {\r\n        if (this.game.debug && message) {\r\n            this.keepLog.push({\r\n                message,\r\n                bySystem: system\r\n            });\r\n        }\r\n        return this.keepLog;\r\n    }\r\n    init() {\r\n        this.log(\"init\", true);\r\n    }\r\n    preload() {\r\n        this.log(\"preload\", true);\r\n    }\r\n    create() {\r\n        this.ground = this.add.tileSprite(-2, this.game.config.height + 2, this.game.config.width + 4, this.game.config.height * 0.2, \"ground\")\r\n            .setOrigin(0, 1)\r\n            .setTileScale((this.game.device.os.desktop ? 1 : 0.6))\r\n            .setDepth(0);\r\n        this.ground.speed = { current: 0, pause: 0, min: 0.4, mid: 0.8, max: 1 };\r\n        this.city = this.add.tileSprite(0, this.game.config.height * 0.8, this.game.config.width, 109, \"city\")\r\n            .setOrigin(0, 1)\r\n            .setDepth(1);\r\n        this.city.speed = { current: 0, pause: 0, min: 0.1, mid: 0.3, max: 0.6 };\r\n        this.cloud = this.add.tileSprite(0, this.game.config.height * 0.6, this.game.config.width, 105, \"cloud\")\r\n            .setOrigin(0, 1)\r\n            .setDepth(2);\r\n        this.cloud.speed = { current: 0, pause: 0, min: -0.2, mid: -0.4, max: -0.6 };\r\n        // load platform\r\n        if (this.name == \"Play\") {\r\n            this.platform = new Platform(this);\r\n        }\r\n        // end of scene\r\n        this.log(\"create\", true);\r\n        this.game.sceneLog(this.name, this.keepLog);\r\n    }\r\n    update() {\r\n        if (this.ground.speed.current) {\r\n            if (this.name == \"Play\") {\r\n                this.platform.run(this.ground.speed.current);\r\n            }\r\n            this.ground.tilePositionX += (this.game.device.os.desktop ? this.ground.speed.current : this.ground.speed.current * 1.6);\r\n            if (this.city.speed.current) {\r\n                this.city.tilePositionX += this.city.speed.current;\r\n            }\r\n        }\r\n        if (this.cloud.speed.current) {\r\n            this.cloud.tilePositionX += this.cloud.speed.current;\r\n        }\r\n    }\r\n    runSpace(speed = \"min\", object = []) {\r\n        if (!object.length) {\r\n            object = [\"ground\", \"city\", \"cloud\"];\r\n        }\r\n        for (let index in object) {\r\n            this[object[index]].speed.current = this[object[index]].speed[speed];\r\n        }\r\n    }\r\n    pauseSpace() {\r\n        this.ground.speed.current = this.ground.speed.pause;\r\n        this.city.speed.current = this.city.speed.pause;\r\n        this.cloud.speed.current = this.cloud.speed.pause;\r\n    }\r\n}\r\n\r\nmodule.exports = Scene;","const Scene = require(\"../scene\");\r\n\r\nclass Boot extends Scene {\r\n    constructor() {\r\n        super(\"Boot\");\r\n    }\r\n    init() {\r\n        super.init();\r\n    }\r\n    preload() {\r\n        super.preload();\r\n        this.load.image(\"ground\", \"data/ground.png\");\r\n        this.load.image(\"city\", \"data/city.png\");\r\n        this.load.image(\"cloud\", \"data/cloud.png\");\r\n        //\r\n        this.load.image(\"tree1\", \"data/tree1.png\");\r\n        this.load.image(\"tree2\", \"data/tree2.png\");\r\n        this.load.image(\"tree3\", \"data/tree3.png\");\r\n        this.load.image(\"tree4\", \"data/tree4.png\");\r\n        this.load.image(\"tree5\", \"data/tree5.png\");\r\n        this.load.image(\"tree6\", \"data/tree6.png\");\r\n        //\r\n        this.load.image(\"light\", \"data/light.png\");\r\n        this.load.image(\"bench\", \"data/bench.png\");\r\n        //\r\n        this.load.image(\"pole\", \"data/pole.png\");\r\n        this.load.image(\"pole-1\", \"data/pole-1.png\");\r\n        this.load.image(\"pole-2\", \"data/pole-2.png\");\r\n        this.load.image(\"pole+1\", \"data/pole+1.png\");\r\n        this.load.image(\"pole+2\", \"data/pole+2.png\");\r\n        //\r\n        this.load.image(\"lamp-1-on\", \"data/lamp-1-on.png\");\r\n        this.load.image(\"lamp-1-off\", \"data/lamp-1-off.png\");\r\n        this.load.image(\"lamp-2-on\", \"data/lamp-2-on.png\");\r\n        this.load.image(\"lamp-2-off\", \"data/lamp-2-off.png\");\r\n    }\r\n    create() {\r\n        super.create();\r\n        this.scene.start(\"Play\");\r\n        //\r\n        // setTimeout(() => {\r\n        // }, 2000);\r\n    }\r\n}\r\n\r\nmodule.exports = Boot;","const Scene = require(\"../scene\");\r\n\r\nclass Play extends Scene {\r\n    constructor() {\r\n        super(\"Play\");\r\n    }\r\n    init() {\r\n        super.init();\r\n    }\r\n    preload() {\r\n        super.preload();\r\n    }\r\n    create() {\r\n        super.create();\r\n        this.runSpace(\"max\");\r\n        // setTimeout(() => {\r\n        //     this.pauseSpace();\r\n        // }, 6000);\r\n    }\r\n}\r\n\r\nmodule.exports = Play;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYWN0aW9uLmpzIiwic3JjL2xpYi9nYW1lLmpzIiwic3JjL2xpYi9nYW1lT2JqZWN0L2JlbmNoLmpzIiwic3JjL2xpYi9nYW1lT2JqZWN0L2xhbXAuanMiLCJzcmMvbGliL2dhbWVPYmplY3QvcGxhdGZvcm0uanMiLCJzcmMvbGliL2dhbWVPYmplY3QvcG9sZS5qcyIsInNyYy9saWIvZ2FtZU9iamVjdC90cmVlLmpzIiwic3JjL2xpYi9zY2VuZS5qcyIsInNyYy9saWIvc2NlbmUvYm9vdC5qcyIsInNyYy9saWIvc2NlbmUvcGxheS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJjb25zdCBkZWJ1ZyA9IFwiQEBkZWJ1Z1wiO1xyXG5jb25zdCBmb250RmFtaWx5ID0gXCJDdXRlIEZvbnRcIjtcclxuY29uc3QgR2FtZSA9IHJlcXVpcmUoXCIuL2xpYi9nYW1lXCIpO1xyXG5cclxuV2ViRm9udC5sb2FkKHtcclxuICAgIGdvb2dsZToge1xyXG4gICAgICAgIGZhbWlsaWVzOiBbZm9udEZhbWlseV1cclxuICAgIH0sXHJcbiAgICBhY3RpdmUoKSB7XHJcbiAgICAgICAgY29uc3QgZ2FtZU9iamVjdCA9IG5ldyBHYW1lKGZvbnRGYW1pbHksIGRlYnVnKTtcclxuICAgIH1cclxufSk7XHJcbiIsIi8vIGxvYWQgc2NlbmVzXHJcbmNvbnN0IEJvb3RTY2VuZSA9IHJlcXVpcmUoXCIuL3NjZW5lL2Jvb3RcIik7XHJcbmNvbnN0IFBsYXlTY2VuZSA9IHJlcXVpcmUoXCIuL3NjZW5lL3BsYXlcIik7XHJcblxyXG5jbGFzcyBHYW1lIGV4dGVuZHMgUGhhc2VyLkdhbWUge1xyXG4gICAgY29uc3RydWN0b3IoZm9udCwgZGVidWcgPSBmYWxzZSkge1xyXG4gICAgICAgIGlmIChkZWJ1Zykge1xyXG4gICAgICAgICAgICBjb25zb2xlLnRpbWUoXCJHYW1lXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHJlbmRlcmVyOiBQaGFzZXIuQVVUTyxcclxuICAgICAgICAgICAgYW50aWFsaWFzOiB0cnVlLFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI2ZjZjFkZVwiLFxyXG4gICAgICAgICAgICBwaXhlbEFydDogZmFsc2UsXHJcbiAgICAgICAgICAgIHJvdW5kUGl4ZWxzOiB0cnVlLFxyXG4gICAgICAgICAgICBhdXRvQ2VudGVyOiB0cnVlLFxyXG4gICAgICAgICAgICBiYW5uZXI6IGRlYnVnLFxyXG4gICAgICAgICAgICBkaXNhYmxlQ29udGV4dE1lbnU6ICFkZWJ1ZyxcclxuICAgICAgICAgICAgc2NhbGU6IHtcclxuICAgICAgICAgICAgICAgIG1vZGU6IFBoYXNlci5TY2FsZS5SRVNJWkUsXHJcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IFwiZ2FtZVwiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2NlbmU6IFtcclxuICAgICAgICAgICAgICAgIEJvb3RTY2VuZSxcclxuICAgICAgICAgICAgICAgIFBsYXlTY2VuZVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5mb250ID0gZm9udDtcclxuICAgICAgICB0aGlzLmRlYnVnID0gZGVidWc7XHJcbiAgICB9XHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICBzdXBlci5zdGFydCgpO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZ2FtZSBjYW52YXNcIikuc3R5bGUub3BhY2l0eSA9IDE7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVidWcpIHtcclxuICAgICAgICAgICAgY29uc29sZS50aW1lRW5kKFwiR2FtZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zY2FsZS5vbihcInJlc2l6ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZ2FtZSBjYW52YXNcIikuc3R5bGUub3BhY2l0eSA9IDA7XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHNjZW5lTG9nKG5hbWUsIGxvZykge1xyXG4gICAgICAgIGlmICh0aGlzLmRlYnVnKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoYCVjU2NlbmUgTG9nIFske25hbWV9XWAsIFwiY29sb3I6IGdyZWVuO1wiKTtcclxuICAgICAgICAgICAgY29uc29sZS50YWJsZShsb2cpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEdhbWU7IiwiY2xhc3MgQmVuY2ggZXh0ZW5kcyBQaGFzZXIuR2FtZU9iamVjdHMuU3ByaXRlIHtcclxuICAgIGNvbnN0cnVjdG9yKHNjZW5lKSB7XHJcbiAgICAgICAgc3VwZXIoc2NlbmUsIDAsIHNjZW5lLmdhbWUuY29uZmlnLmhlaWdodCAqIDAuOCwgXCJiZW5jaFwiKTtcclxuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XHJcbiAgICAgICAgdGhpcy5zZXRPcmlnaW4oMCwgMC45MilcclxuICAgICAgICAgICAgLnNldFNjYWxlKDAuOClcclxuICAgICAgICAgICAgLnNldERlcHRoKDQpO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzaG93KCkge1xyXG4gICAgICAgIHRoaXMuc2NlbmUuYWRkLmV4aXN0aW5nKHRoaXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEJlbmNoOyIsImNsYXNzIExhbXAgZXh0ZW5kcyBQaGFzZXIuR2FtZU9iamVjdHMuU3ByaXRlIHtcclxuICAgIGNvbnN0cnVjdG9yKHNjZW5lLCBjb3VudCA9IDIsIHN0YXR1cyA9IGZhbHNlLCBmbGlwID0gZmFsc2UpIHtcclxuICAgICAgICBzdXBlcihzY2VuZSwgMCwgc2NlbmUuZ2FtZS5jb25maWcuaGVpZ2h0ICogMC44LCBgbGFtcC0ke2NvdW50fS0keyhzdGF0dXMgPT0gdHJ1ZSA/IFwib25cIiA6IFwib2ZmXCIpfWApO1xyXG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcclxuICAgICAgICB0aGlzLmdhbWVDaGVjayA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdHVzID0gc3RhdHVzO1xyXG4gICAgICAgIHRoaXMuc2V0T3JpZ2luKDAsIDAuOTgpXHJcbiAgICAgICAgICAgIC5zZXRTY2FsZSgwLjgpXHJcbiAgICAgICAgICAgIC5zZXREZXB0aCg0KVxyXG4gICAgICAgICAgICAuc2V0RmxpcFgoZmxpcClcclxuICAgICAgICAgICAgLnNldEludGVyYWN0aXZlKClcclxuICAgICAgICAgICAgLm9uKFwicG9pbnRlcmRvd25cIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdHVzID0gIXRoaXMuZ2FtZVN0YXR1cztcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGV4dHVyZShgbGFtcC0ke2NvdW50fS0keyh0aGlzLmdhbWVTdGF0dXMgPyBcIm9uXCIgOiBcIm9mZlwiKX1gKTtcclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgLy9cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgdGhpcy5zY2VuZS5hZGQuZXhpc3RpbmcodGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTGFtcDsiLCJjb25zdCBUcmVlU3ByaXRlID0gcmVxdWlyZShcIi4vdHJlZVwiKTtcclxuY29uc3QgUG9sZVNwcml0ZSA9IHJlcXVpcmUoXCIuL3BvbGVcIik7XHJcbmNvbnN0IEJlbmNoU3ByaXRlID0gcmVxdWlyZShcIi4vYmVuY2hcIik7XHJcbmNvbnN0IExhbXBTcHJpdGUgPSByZXF1aXJlKFwiLi9sYW1wXCIpO1xyXG5cclxuY2xhc3MgUGxhdGZvcm0gZXh0ZW5kcyBQaGFzZXIuR2FtZU9iamVjdHMuQ29udGFpbmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHNjZW5lKSB7XHJcbiAgICAgICAgc3VwZXIoc2NlbmUsIDAsIDApO1xyXG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcclxuICAgICAgICB0aGlzLmxldmVsID0ge1xyXG4gICAgICAgICAgICBzY29yZTogMFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHtcclxuICAgICAgICAgICAgYXZhaWxhYmxlOiBcInRocmVlXCIsXHJcbiAgICAgICAgICAgIG9uZToge1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzOiBcImFjdGl2ZVwiLFxyXG4gICAgICAgICAgICAgICAga2VlcDogMjAsXHJcbiAgICAgICAgICAgICAgICBlbDogdGhpcy5zY2VuZS5hZGQuY29udGFpbmVyKHRoaXMuc2NlbmUuZ2FtZS5jb25maWcud2lkdGggKiAwLjUsIDApXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHR3bzoge1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzOiBcImFjdGl2ZVwiLFxyXG4gICAgICAgICAgICAgICAga2VlcDogMjAsXHJcbiAgICAgICAgICAgICAgICBlbDogdGhpcy5zY2VuZS5hZGQuY29udGFpbmVyKHRoaXMuc2NlbmUuZ2FtZS5jb25maWcud2lkdGggKiAxLjUsIDApXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRocmVlOiB7XHJcbiAgICAgICAgICAgICAgICBzdGF0dXM6IFwicGF1c2VcIixcclxuICAgICAgICAgICAgICAgIGtlZXA6IDIwLFxyXG4gICAgICAgICAgICAgICAgZWw6IHRoaXMuc2NlbmUuYWRkLmNvbnRhaW5lcih0aGlzLnNjZW5lLmdhbWUuY29uZmlnLndpZHRoLCAwKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5hcmVhKHRoaXMuc2NvcGUub25lLmVsLCAweGZmMDAwMCk7XHJcbiAgICAgICAgdGhpcy5hcmVhKHRoaXMuc2NvcGUudHdvLmVsLCAweDAwZmYwMCk7XHJcbiAgICAgICAgdGhpcy5hcmVhKHRoaXMuc2NvcGUudGhyZWUuZWwsIDB4MDAwMGZmKTtcclxuICAgICAgICAvLyBhZGQgdGl0bGVcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGhpcy5zY2VuZS5hZGQudGV4dCh0aGlzLnNjZW5lLmdhbWUuY29uZmlnLndpZHRoICogMC41LCB0aGlzLnNjZW5lLmdhbWUuY29uZmlnLmhlaWdodCAqIDAuMTUsIFwiXCIsIHtcclxuICAgICAgICAgICAgZm9udDogYCR7KHRoaXMuc2NlbmUuZ2FtZS5kZXZpY2Uub3MuZGVza3RvcCA/IFwiMTYwXCIgOiBcIjEwMFwiKX1weCAnJHt0aGlzLnNjZW5lLmdhbWUuZm9udH0nYCxcclxuICAgICAgICAgICAgZmlsbDogXCIjRkZGOEVFXCJcclxuICAgICAgICB9KS5zZXRUZXh0KGBMaWdodFRyZWUke3RoaXMuc2NlbmUuZ2FtZS5kZWJ1ZyA/IHRoaXMuc2NlbmUubmFtZS5jaGFyQXQoMCkgOiBcIlwifWApLnNldE9yaWdpbigwLjUpO1xyXG4gICAgICAgIHRoaXMuYWRkKFt0aGlzLnRpdGxlLCB0aGlzLnNjb3BlLm9uZS5lbCwgdGhpcy5zY29wZS50d28uZWwsIHRoaXMuc2NvcGUudGhyZWUuZWxdKS5zZXREZXB0aCgxMCk7XHJcbiAgICAgICAgLy8gc2V0IGxpbWl0XHJcbiAgICAgICAgdGhpcy5saW1pdCA9IHRoaXMuc2NlbmUuZ2FtZS5jb25maWcud2lkdGggKiAtMTtcclxuICAgICAgICB0aGlzLnNjZW5lLmFkZC5leGlzdGluZyh0aGlzKTtcclxuICAgICAgICB0aGlzLmFkZENvbnRlbnQodGhpcy5zY29wZS5vbmUpO1xyXG4gICAgICAgIHRoaXMuYWRkQ29udGVudCh0aGlzLnNjb3BlLnR3byk7XHJcbiAgICB9XHJcbiAgICBhZGRDb250ZW50KHNjb3BlKSB7XHJcbiAgICAgICAgLy8gZG8ge1xyXG4gICAgICAgIGxldCBzcGFjZSA9IFBoYXNlci5NYXRoLkJldHdlZW4oMjAsIHRoaXMuc2NlbmUuZ2FtZS5jb25maWcud2lkdGggKiAwLjEpO1xyXG5cclxuICAgICAgICBsZXQgbGlnaHRDb3VudCA9IFBoYXNlci5NYXRoLkJldHdlZW4oMCwgNCk7XHJcbiAgICAgICAgbGV0IHRyZWUgPSBuZXcgVHJlZVNwcml0ZSh0aGlzLnNjZW5lLCBQaGFzZXIuTWF0aC5CZXR3ZWVuKDEsIDYpLCBsaWdodENvdW50KS5zaG93KCkuc2V0WChzY29wZS5rZWVwICsgc3BhY2UpO1xyXG4gICAgICAgIHNjb3BlLmVsLmFkZCh0cmVlKTtcclxuICAgICAgICBzY29wZS5rZWVwICs9IHRyZWUud2lkdGggKyBzcGFjZTtcclxuXHJcbiAgICAgICAgbGV0IHBvbGUgPSBuZXcgUG9sZVNwcml0ZSh0aGlzLnNjZW5lKS5zaG93KCkuc2V0WChzY29wZS5rZWVwICsgc3BhY2UpO1xyXG4gICAgICAgIHNjb3BlLmVsLmFkZChwb2xlKTtcclxuICAgICAgICBzY29wZS5rZWVwICs9IHBvbGUuZGlzcGxheVdpZHRoICsgc3BhY2U7XHJcblxyXG4gICAgICAgIGxldCBiZW5jaCA9IG5ldyBCZW5jaFNwcml0ZSh0aGlzLnNjZW5lKS5zaG93KCkuc2V0WChzY29wZS5rZWVwICsgc3BhY2UpO1xyXG4gICAgICAgIHNjb3BlLmVsLmFkZChiZW5jaCk7XHJcbiAgICAgICAgc2NvcGUua2VlcCArPSBiZW5jaC5kaXNwbGF5V2lkdGggKyBzcGFjZTtcclxuXHJcbiAgICAgICAgbGV0IGxhbXAgPSBuZXcgTGFtcFNwcml0ZSh0aGlzLnNjZW5lLCAxLCBmYWxzZSwgZmFsc2UpLnNob3coKS5zZXRYKHNjb3BlLmtlZXAgKyBzcGFjZSk7XHJcbiAgICAgICAgc2NvcGUuZWwuYWRkKGxhbXApO1xyXG4gICAgICAgIHNjb3BlLmtlZXAgKz0gbGFtcC5kaXNwbGF5V2lkdGggKyBzcGFjZTtcclxuXHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIHdoaWxlIChzY29wZS5rZWVwIDw9IHNjb3BlLmVsLndpZHRoICogMC44KTtcclxuICAgIH1cclxuICAgIHJlbW92ZUNvbnRlbnQoc2NvcGUpIHtcclxuICAgICAgICBzY29wZS5zdGF0dXMgPSBcInBhdXNlXCI7XHJcbiAgICAgICAgc2NvcGUuZWwueCA9IE1hdGguYWJzKHRoaXMubGltaXQpO1xyXG4gICAgICAgIHNjb3BlLmVsLmVhY2goKGNoaWxkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZC5nYW1lQ2hlY2spIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjaGlsZC5kZXN0cm95KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2NvcGUuZWwucmVtb3ZlQWxsKHRydWUpO1xyXG4gICAgICAgIHNjb3BlLmtlZXAgPSAyMDtcclxuICAgIH1cclxuICAgIHJ1bihzcGVlZCA9IDApIHtcclxuICAgICAgICBpZiAoc3BlZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5sZXZlbC5zY29yZSArPSBzcGVlZDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NvcGUub25lLnN0YXR1cyA9PSBcImFjdGl2ZVwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjb3BlLm9uZS5lbC54IC09IHNwZWVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2NvcGUub25lLmVsLnggPD0gdGhpcy5saW1pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQ29udGVudCh0aGlzLnNjb3BlLm9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY29wZS5hdmFpbGFibGUgPSBcIm9uZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NvcGUudGhyZWUuc3RhdHVzID0gXCJhY3RpdmVcIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZENvbnRlbnQodGhpcy5zY29wZS50aHJlZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NvcGUudHdvLnN0YXR1cyA9PSBcImFjdGl2ZVwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjb3BlLnR3by5lbC54IC09IHNwZWVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2NvcGUudHdvLmVsLnggPD0gdGhpcy5saW1pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQ29udGVudCh0aGlzLnNjb3BlLnR3byk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY29wZS5hdmFpbGFibGUgPSBcInR3b1wiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NvcGUub25lLnN0YXR1cyA9IFwiYWN0aXZlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDb250ZW50KHRoaXMuc2NvcGUub25lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5zY29wZS50aHJlZS5zdGF0dXMgPT0gXCJhY3RpdmVcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY29wZS50aHJlZS5lbC54IC09IHNwZWVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2NvcGUudGhyZWUuZWwueCA8PSB0aGlzLmxpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVDb250ZW50KHRoaXMuc2NvcGUudGhyZWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NvcGUuYXZhaWxhYmxlID0gXCJ0aHJlZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NvcGUudHdvLnN0YXR1cyA9IFwiYWN0aXZlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDb250ZW50KHRoaXMuc2NvcGUudHdvKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0ZXN0XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5zY2VuZS5wYXVzZVNwYWNlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy50aXRsZS5zZXRUZXh0KE1hdGgucm91bmQodGhpcy5sZXZlbC5zY29yZSAvIDEwKS50b1N0cmluZygpLnBhZFN0YXJ0KDYsIFwiMFwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXJlYShzY29wZSwgY29sb3IpIHtcclxuICAgICAgICBzY29wZS5zZXRTaXplKHRoaXMuc2NlbmUuZ2FtZS5jb25maWcud2lkdGggLSA0MCwgKHRoaXMuc2NlbmUuZ2FtZS5jb25maWcuaGVpZ2h0ICogMC44KSAtIDQwKVxyXG4gICAgICAgIGxldCBhcmVhU3RhcnQgPSB0aGlzLnNjZW5lLmFkZC5ncmFwaGljcygwLCAwKVxyXG4gICAgICAgICAgICAuZmlsbFN0eWxlKGNvbG9yLCAwLjUpXHJcbiAgICAgICAgICAgIC5maWxsUmVjdCgxMCwgMTAsIDIsIHNjb3BlLmhlaWdodCArIDIwKTtcclxuICAgICAgICBsZXQgYXJlYUVuZCA9IHRoaXMuc2NlbmUuYWRkLmdyYXBoaWNzKDAsIDApXHJcbiAgICAgICAgICAgIC5maWxsU3R5bGUoY29sb3IsIDAuNSlcclxuICAgICAgICAgICAgLmZpbGxSZWN0KHNjb3BlLndpZHRoIC0gMTAsIDEwLCAyLCBzY29wZS5oZWlnaHQgKyAyMCk7XHJcbiAgICAgICAgc2NvcGUuYWRkKFthcmVhU3RhcnQsIGFyZWFFbmRdKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQbGF0Zm9ybTsiLCJjbGFzcyBQb2xlIGV4dGVuZHMgUGhhc2VyLkdhbWVPYmplY3RzLlNwcml0ZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihzY2VuZSwgdHlwZSA9IFwiXCIpIHtcclxuICAgICAgICBzdXBlcihzY2VuZSwgMCwgc2NlbmUuZ2FtZS5jb25maWcuaGVpZ2h0ICogMC44LCBgcG9sZSR7dHlwZX1gKTtcclxuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XHJcbiAgICAgICAgdGhpcy5zZXRPcmlnaW4oMCwgMC45OClcclxuICAgICAgICAgICAgLnNldFNjYWxlKDAuOClcclxuICAgICAgICAgICAgLnNldERlcHRoKDQpO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzaG93KCkge1xyXG4gICAgICAgIHRoaXMuc2NlbmUuYWRkLmV4aXN0aW5nKHRoaXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFBvbGU7IiwiY2xhc3MgVHJlZSBleHRlbmRzIFBoYXNlci5HYW1lT2JqZWN0cy5Db250YWluZXIge1xyXG4gICAgY29uc3RydWN0b3Ioc2NlbmUsIHR5cGUgPSBcIjFcIiwgbGlnaHRDb3VudCA9IDApIHtcclxuICAgICAgICBzdXBlcihzY2VuZSwgMCwgc2NlbmUuZ2FtZS5jb25maWcuaGVpZ2h0ICogMC44KTtcclxuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XHJcbiAgICAgICAgbGV0IHRyZWUgPSB0aGlzLnNjZW5lLmFkZC5zcHJpdGUoMCwgMCwgYHRyZWUke3R5cGV9YClcclxuICAgICAgICAgICAgLnNldFNjYWxlKDAuNylcclxuICAgICAgICAgICAgLnNldE9yaWdpbigwLCAwLjkyKTtcclxuICAgICAgICB0aGlzLmFkZCh0cmVlKTtcclxuICAgICAgICBpZiAobGlnaHRDb3VudCA8IDAgfHwgbGlnaHRDb3VudCA+IDQpIHtcclxuICAgICAgICAgICAgbGlnaHRDb3VudCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsaWdodENvdW50KSB7XHJcbiAgICAgICAgICAgIGxldCBjb3VudCA9IHtcclxuICAgICAgICAgICAgICAgIHc6IDIwMCxcclxuICAgICAgICAgICAgICAgIGg6IDIzMFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGxpZ2h0Q291bnQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50LncgKj0gMjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgMzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50LncgKj0gMztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgNDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50LncgKj0gMjtcclxuICAgICAgICAgICAgICAgICAgICBjb3VudC5oICo9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGxpZ2h0ID0gdGhpcy5zY2VuZS5hZGQudGlsZVNwcml0ZSh0cmVlLmRpc3BsYXlXaWR0aCAvIDIsICh0cmVlLmRpc3BsYXlIZWlnaHQgKiAtMSksIGNvdW50LncsIGNvdW50LmgsIFwibGlnaHRcIilcclxuICAgICAgICAgICAgICAgIC5zZXRTY2FsZSgwLjEzKVxyXG4gICAgICAgICAgICAgICAgLnNldE9yaWdpbigwLjUsIDEpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZChsaWdodCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0RGVwdGgoNCkuc2V0U2l6ZSh0cmVlLmRpc3BsYXlXaWR0aCwgdHJlZS5kaXNwbGF5SGVpZ2h0KTtcclxuICAgICAgICAvL1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc2hvdygpIHtcclxuICAgICAgICB0aGlzLnNjZW5lLmFkZC5leGlzdGluZyh0aGlzKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBUcmVlOyIsImNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZShcIi4vZ2FtZU9iamVjdC9wbGF0Zm9ybVwiKTtcclxuXHJcbmNsYXNzIFNjZW5lIGV4dGVuZHMgUGhhc2VyLlNjZW5lIHtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMua2VlcExvZyA9IFtdO1xyXG4gICAgfVxyXG4gICAgbG9nKG1lc3NhZ2UgPSBudWxsLCBzeXN0ZW0gPSBmYWxzZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmdhbWUuZGVidWcgJiYgbWVzc2FnZSkge1xyXG4gICAgICAgICAgICB0aGlzLmtlZXBMb2cucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgYnlTeXN0ZW06IHN5c3RlbVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMua2VlcExvZztcclxuICAgIH1cclxuICAgIGluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5sb2coXCJpbml0XCIsIHRydWUpO1xyXG4gICAgfVxyXG4gICAgcHJlbG9hZCgpIHtcclxuICAgICAgICB0aGlzLmxvZyhcInByZWxvYWRcIiwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5ncm91bmQgPSB0aGlzLmFkZC50aWxlU3ByaXRlKC0yLCB0aGlzLmdhbWUuY29uZmlnLmhlaWdodCArIDIsIHRoaXMuZ2FtZS5jb25maWcud2lkdGggKyA0LCB0aGlzLmdhbWUuY29uZmlnLmhlaWdodCAqIDAuMiwgXCJncm91bmRcIilcclxuICAgICAgICAgICAgLnNldE9yaWdpbigwLCAxKVxyXG4gICAgICAgICAgICAuc2V0VGlsZVNjYWxlKCh0aGlzLmdhbWUuZGV2aWNlLm9zLmRlc2t0b3AgPyAxIDogMC42KSlcclxuICAgICAgICAgICAgLnNldERlcHRoKDApO1xyXG4gICAgICAgIHRoaXMuZ3JvdW5kLnNwZWVkID0geyBjdXJyZW50OiAwLCBwYXVzZTogMCwgbWluOiAwLjQsIG1pZDogMC44LCBtYXg6IDEgfTtcclxuICAgICAgICB0aGlzLmNpdHkgPSB0aGlzLmFkZC50aWxlU3ByaXRlKDAsIHRoaXMuZ2FtZS5jb25maWcuaGVpZ2h0ICogMC44LCB0aGlzLmdhbWUuY29uZmlnLndpZHRoLCAxMDksIFwiY2l0eVwiKVxyXG4gICAgICAgICAgICAuc2V0T3JpZ2luKDAsIDEpXHJcbiAgICAgICAgICAgIC5zZXREZXB0aCgxKTtcclxuICAgICAgICB0aGlzLmNpdHkuc3BlZWQgPSB7IGN1cnJlbnQ6IDAsIHBhdXNlOiAwLCBtaW46IDAuMSwgbWlkOiAwLjMsIG1heDogMC42IH07XHJcbiAgICAgICAgdGhpcy5jbG91ZCA9IHRoaXMuYWRkLnRpbGVTcHJpdGUoMCwgdGhpcy5nYW1lLmNvbmZpZy5oZWlnaHQgKiAwLjYsIHRoaXMuZ2FtZS5jb25maWcud2lkdGgsIDEwNSwgXCJjbG91ZFwiKVxyXG4gICAgICAgICAgICAuc2V0T3JpZ2luKDAsIDEpXHJcbiAgICAgICAgICAgIC5zZXREZXB0aCgyKTtcclxuICAgICAgICB0aGlzLmNsb3VkLnNwZWVkID0geyBjdXJyZW50OiAwLCBwYXVzZTogMCwgbWluOiAtMC4yLCBtaWQ6IC0wLjQsIG1heDogLTAuNiB9O1xyXG4gICAgICAgIC8vIGxvYWQgcGxhdGZvcm1cclxuICAgICAgICBpZiAodGhpcy5uYW1lID09IFwiUGxheVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm0gPSBuZXcgUGxhdGZvcm0odGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGVuZCBvZiBzY2VuZVxyXG4gICAgICAgIHRoaXMubG9nKFwiY3JlYXRlXCIsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5zY2VuZUxvZyh0aGlzLm5hbWUsIHRoaXMua2VlcExvZyk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ3JvdW5kLnNwZWVkLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubmFtZSA9PSBcIlBsYXlcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF0Zm9ybS5ydW4odGhpcy5ncm91bmQuc3BlZWQuY3VycmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5ncm91bmQudGlsZVBvc2l0aW9uWCArPSAodGhpcy5nYW1lLmRldmljZS5vcy5kZXNrdG9wID8gdGhpcy5ncm91bmQuc3BlZWQuY3VycmVudCA6IHRoaXMuZ3JvdW5kLnNwZWVkLmN1cnJlbnQgKiAxLjYpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jaXR5LnNwZWVkLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2l0eS50aWxlUG9zaXRpb25YICs9IHRoaXMuY2l0eS5zcGVlZC5jdXJyZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNsb3VkLnNwZWVkLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG91ZC50aWxlUG9zaXRpb25YICs9IHRoaXMuY2xvdWQuc3BlZWQuY3VycmVudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBydW5TcGFjZShzcGVlZCA9IFwibWluXCIsIG9iamVjdCA9IFtdKSB7XHJcbiAgICAgICAgaWYgKCFvYmplY3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIG9iamVjdCA9IFtcImdyb3VuZFwiLCBcImNpdHlcIiwgXCJjbG91ZFwiXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggaW4gb2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXNbb2JqZWN0W2luZGV4XV0uc3BlZWQuY3VycmVudCA9IHRoaXNbb2JqZWN0W2luZGV4XV0uc3BlZWRbc3BlZWRdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHBhdXNlU3BhY2UoKSB7XHJcbiAgICAgICAgdGhpcy5ncm91bmQuc3BlZWQuY3VycmVudCA9IHRoaXMuZ3JvdW5kLnNwZWVkLnBhdXNlO1xyXG4gICAgICAgIHRoaXMuY2l0eS5zcGVlZC5jdXJyZW50ID0gdGhpcy5jaXR5LnNwZWVkLnBhdXNlO1xyXG4gICAgICAgIHRoaXMuY2xvdWQuc3BlZWQuY3VycmVudCA9IHRoaXMuY2xvdWQuc3BlZWQucGF1c2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU2NlbmU7IiwiY29uc3QgU2NlbmUgPSByZXF1aXJlKFwiLi4vc2NlbmVcIik7XHJcblxyXG5jbGFzcyBCb290IGV4dGVuZHMgU2NlbmUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJCb290XCIpO1xyXG4gICAgfVxyXG4gICAgaW5pdCgpIHtcclxuICAgICAgICBzdXBlci5pbml0KCk7XHJcbiAgICB9XHJcbiAgICBwcmVsb2FkKCkge1xyXG4gICAgICAgIHN1cGVyLnByZWxvYWQoKTtcclxuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoXCJncm91bmRcIiwgXCJkYXRhL2dyb3VuZC5wbmdcIik7XHJcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKFwiY2l0eVwiLCBcImRhdGEvY2l0eS5wbmdcIik7XHJcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKFwiY2xvdWRcIiwgXCJkYXRhL2Nsb3VkLnBuZ1wiKTtcclxuICAgICAgICAvL1xyXG4gICAgICAgIHRoaXMubG9hZC5pbWFnZShcInRyZWUxXCIsIFwiZGF0YS90cmVlMS5wbmdcIik7XHJcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKFwidHJlZTJcIiwgXCJkYXRhL3RyZWUyLnBuZ1wiKTtcclxuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoXCJ0cmVlM1wiLCBcImRhdGEvdHJlZTMucG5nXCIpO1xyXG4gICAgICAgIHRoaXMubG9hZC5pbWFnZShcInRyZWU0XCIsIFwiZGF0YS90cmVlNC5wbmdcIik7XHJcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKFwidHJlZTVcIiwgXCJkYXRhL3RyZWU1LnBuZ1wiKTtcclxuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoXCJ0cmVlNlwiLCBcImRhdGEvdHJlZTYucG5nXCIpO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKFwibGlnaHRcIiwgXCJkYXRhL2xpZ2h0LnBuZ1wiKTtcclxuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoXCJiZW5jaFwiLCBcImRhdGEvYmVuY2gucG5nXCIpO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKFwicG9sZVwiLCBcImRhdGEvcG9sZS5wbmdcIik7XHJcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKFwicG9sZS0xXCIsIFwiZGF0YS9wb2xlLTEucG5nXCIpO1xyXG4gICAgICAgIHRoaXMubG9hZC5pbWFnZShcInBvbGUtMlwiLCBcImRhdGEvcG9sZS0yLnBuZ1wiKTtcclxuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoXCJwb2xlKzFcIiwgXCJkYXRhL3BvbGUrMS5wbmdcIik7XHJcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKFwicG9sZSsyXCIsIFwiZGF0YS9wb2xlKzIucG5nXCIpO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKFwibGFtcC0xLW9uXCIsIFwiZGF0YS9sYW1wLTEtb24ucG5nXCIpO1xyXG4gICAgICAgIHRoaXMubG9hZC5pbWFnZShcImxhbXAtMS1vZmZcIiwgXCJkYXRhL2xhbXAtMS1vZmYucG5nXCIpO1xyXG4gICAgICAgIHRoaXMubG9hZC5pbWFnZShcImxhbXAtMi1vblwiLCBcImRhdGEvbGFtcC0yLW9uLnBuZ1wiKTtcclxuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoXCJsYW1wLTItb2ZmXCIsIFwiZGF0YS9sYW1wLTItb2ZmLnBuZ1wiKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZSgpIHtcclxuICAgICAgICBzdXBlci5jcmVhdGUoKTtcclxuICAgICAgICB0aGlzLnNjZW5lLnN0YXJ0KFwiUGxheVwiKTtcclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vIH0sIDIwMDApO1xyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEJvb3Q7IiwiY29uc3QgU2NlbmUgPSByZXF1aXJlKFwiLi4vc2NlbmVcIik7XHJcblxyXG5jbGFzcyBQbGF5IGV4dGVuZHMgU2NlbmUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJQbGF5XCIpO1xyXG4gICAgfVxyXG4gICAgaW5pdCgpIHtcclxuICAgICAgICBzdXBlci5pbml0KCk7XHJcbiAgICB9XHJcbiAgICBwcmVsb2FkKCkge1xyXG4gICAgICAgIHN1cGVyLnByZWxvYWQoKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZSgpIHtcclxuICAgICAgICBzdXBlci5jcmVhdGUoKTtcclxuICAgICAgICB0aGlzLnJ1blNwYWNlKFwibWF4XCIpO1xyXG4gICAgICAgIC8vIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vICAgICB0aGlzLnBhdXNlU3BhY2UoKTtcclxuICAgICAgICAvLyB9LCA2MDAwKTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQbGF5OyJdfQ=="}